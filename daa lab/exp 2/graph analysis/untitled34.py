# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tlA9XRxKYCHs7RJkgWRC50iBmC-FR1oo
"""

import matplotlib.pyplot as plt

# Data from C program (replace with actual timings)
n_values = [10000, 20000, 30000, 40000, 50000, 60000]
recursive_times = [0.007, 0.010, 0.016, 0.017, 0.021, 0.033]  # Example times for recursive insertions
iterative_times = [0.009, 0.009, 0.011, 0.019, 0.018, 0.019]  # Example times for iterative insertions

# Create the plot
plt.plot(n_values, recursive_times, label='Recursive Insertion', marker='o')
plt.plot(n_values, iterative_times, label='Iterative Insertion', marker='o')

# Add labels and title
plt.xlabel('n (Size of the tree)')
plt.ylabel('Time (seconds)')
plt.title('Recursive vs Iterative BST Insertion Time')
plt.legend()

# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Data from the C program output (replace with actual times)
n_values = [10000, 20000, 30000, 40000, 50000, 60000]
merge_sort_times = [0.015, 0.030, 0.050, 0.070, 0.090, 0.120]  # Example times for Merge Sort
quick_sort_times = [0.010, 0.025, 0.040, 0.060, 0.080, 0.110]  # Example times for Quick Sort

# Create the plot
plt.plot(n_values, merge_sort_times, label='Merge Sort', marker='o')
plt.plot(n_values, quick_sort_times, label='Quick Sort', marker='o')

# Add labels and title
plt.xlabel('n (Size of the Array)')
plt.ylabel('Time (seconds)')
plt.title('Merge Sort vs Quick Sort Performance')
plt.legend()

# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Data from the C program output (replace with actual times)
n_values = [10000, 20000, 30000, 40000, 50000, 60000]
merge_sort_times = [0.005, 0.002, 0.007, 0.029, 0.011, 0.019]  # Example times for Merge Sort
quick_sort_times = [0.002, 0.002, 0.006, 0.006, 0.008, 0.011]  # Example times for Quick Sort

# Create the plot
plt.plot(n_values, merge_sort_times, label='Merge Sort', marker='o')
plt.plot(n_values, quick_sort_times, label='Quick Sort', marker='o')

# Add labels and title
plt.xlabel('n (Size of the Array)')
plt.ylabel('Time (seconds)')
plt.title('Merge Sort vs Quick Sort Performance')
plt.legend()

# Show the plot
plt.grid(True)
plt.show()